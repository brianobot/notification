from utils.models import TimeStampedModel
from django.db import models
from accounts.models import Profile
from channels.layers import get_channel_layer
from asgiref.sync import async_to_sync
import json

class Notification(TimeStampedModel):
    STATUS = (
        ("unread", "unread"),
        ("read", "read"),
    )
    profile = models.ForeignKey(Profile, on_delete=models.CASCADE)
    initiator = models.ForeignKey(Profile, on_delete=models.CASCADE, blank=True, null=True, related_name='notifier')
    # review implement a field to hold the topic of the notification which would a name specifying the action the notification is about
    # topic = models.CharField(choices=ContentType)
    message = models.TextField()
    # link = models.URLField(blank=True) #allow link back to the detail pages on the event been notified about
    link = models.CharField(max_length=100, blank=True, default='') #allow link back to the detail pages on the event been notified about
    status = models.CharField(max_length=10, choices=STATUS, default="unread", blank=True)

    class Meta:
        ordering = ['-updated']

    def __str__(self):
        return self.message

    def __repr__(self):
        return f"Notification(initiator={self.initiator}, profile={self.profile})"

    def send_notification_to_group(self, message=None):
        channel_layer = get_channel_layer()
        # channel group name for each user is generated by appending their username to the string '_notification_group'
        profile_group_name = f"{str(self.profile.user).split('@')[0]}_notification_group"
        # get the count of all the unseen notification belonging to the profile
        unread_notification = Notification.objects.filter(profile=self.profile, status="unread").count()
        data = {'unread_count': unread_notification, 'current_notification': message}

        async_to_sync(channel_layer.group_send)(
            profile_group_name,
            {
                'type': 'send.notification',
                'level': 'db_save',
                'pk': self.pk,
                'value': json.dumps(data),
            }
        )
    
    def save(self, *args, **kwargs):
        super().save(*args, **kwargs)
        self.send_notification_to_group(self.message)
